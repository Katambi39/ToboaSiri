// backend/server.js
import express from 'express';
import mongoose from 'mongoose';
import cors from 'cors';
import dotenv from 'dotenv';
import admin from 'firebase-admin';

dotenv.config();
const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(express.json());
app.use(cors());

// Initialize Firebase Admin SDK
admin.initializeApp({
  credential: admin.credential.cert(JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT)),
});

// MongoDB Connection
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log('MongoDB Connected'))
.catch(err => console.log(err));

// Models
const UserSchema = new mongoose.Schema({
  name: String,
  email: { type: String, unique: true },
  uid: { type: String, unique: true },
  provider: { type: String, default: 'email' }, // Social login provider
  badges: { type: [String], default: [] }, // User badges for gamification
});
const StorySchema = new mongoose.Schema({
  title: String,
  author: { type: mongoose.Schema.Types.ObjectId, ref: 'User', default: null },
  anonymous: { type: Boolean, default: false },
  createdAt: { type: Date, default: Date.now },
  likes: { type: Number, default: 0 },
  comments: [{
    user: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
    text: String,
    createdAt: { type: Date, default: Date.now },
  }],
  shares: { type: Number, default: 0 },
  media: { type: String, default: '' }, // Image or short video URL
  reactions: { type: Map, of: Number, default: {} }, // Emojis reactions
});

const GroupSchema = new mongoose.Schema({
  name: { type: String, required: true },
  description: { type: String },
  createdAt: { type: Date, default: Date.now },
  members: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],
  posts: [{
    author: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
    content: String,
    createdAt: { type: Date, default: Date.now },
  }]
});

const User = mongoose.model('User', UserSchema);
const Story = mongoose.model('Story', StorySchema);
const Group = mongoose.model('Group', GroupSchema);

// Middleware to verify Firebase token
const verifyToken = async (req, res, next) => {
  const token = req.headers.authorization;
  if (!token) return res.status(401).json({ error: 'Unauthorized' });

  try {
    const decodedToken = await admin.auth().verifyIdToken(token);
    req.user = decodedToken;
    next();
  } catch (error) {
    res.status(403).json({ error: 'Invalid token' });
  }
};

// Create a Group
app.post('/api/groups', verifyToken, async (req, res) => {
  try {
    const group = new Group({
      name: req.body.name,
      description: req.body.description,
      members: [req.user.uid],
    });
    await group.save();
    res.status(201).json(group);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Join a Group
app.post('/api/groups/:groupId/join', verifyToken, async (req, res) => {
  try {
    const group = await Group.findById(req.params.groupId);
    if (!group) return res.status(404).json({ error: 'Group not found' });
    if (!group.members.includes(req.user.uid)) {
      group.members.push(req.user.uid);
      await group.save();
    }
    res.status(200).json({ message: 'Joined group successfully', group });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Fetch All Groups
app.get('/api/groups', async (req, res) => {
  try {
    const groups = await Group.find();
    res.json(groups);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Sample Route
app.get('/', (req, res) => {
  res.send('Toboa Siri254 API is running...');
});

app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
