from fastapi import FastAPI, HTTPException, Depends
from pymongo import MongoClient
from pydantic import BaseModel
from firebase_admin import auth, credentials, initialize_app
import os
from dotenv import load_dotenv
from bson import ObjectId

# Load environment variables
load_dotenv()

# Initialize FastAPI
app = FastAPI()

# Firebase Admin SDK Initialization
cred = credentials.Certificate(eval(os.getenv("FIREBASE_SERVICE_ACCOUNT")))
initialize_app(cred)

# MongoDB Connection
client = MongoClient(os.getenv("MONGO_URI"))
db = client["toboa_siri"]
users_collection = db["users"]
stories_collection = db["stories"]
groups_collection = db["groups"]

# Generate Avatar URL
def generate_avatar(name):
    return f"https://api.dicebear.com/7.x/bottts/svg?seed={name.replace(' ', '%20')}"

# Models
class User(BaseModel):
    name: str
    email: str
    uid: str

class Story(BaseModel):
    title: str
    author: str | None = None
    anonymous: bool = False
    media: str | None = None

class Group(BaseModel):
    name: str
    description: str
    creator: str

# Middleware to Verify Firebase Token
async def verify_token(token: str):
    try:
        decoded_token = auth.verify_id_token(token)
        return decoded_token
    except:
        raise HTTPException(status_code=403, detail="Invalid token")

# Register User
@app.post("/api/register")
async def register_user(user: User):
    existing_user = users_collection.find_one({"email": user.email})
    if existing_user:
        return {"message": "User already exists"}

    avatar = generate_avatar(user.name)
    users_collection.insert_one({"name": user.name, "email": user.email, "uid": user.uid, "avatar": avatar, "activity": []})
    return {"message": "User registered successfully", "avatar": avatar}

# Post a Story
@app.post("/api/story")
async def post_story(story: Story, token: str = Depends(verify_token)):
    user = users_collection.find_one({"uid": token["uid"]})
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    story_data = {
        "title": story.title,
        "author": None if story.anonymous else user["name"],
        "anonymous": story.anonymous,
        "media": story.media,
        "likes": 0,
        "shares": 0,
        "comments": [],
    }
    stories_collection.insert_one(story_data)
    return {"message": "Story posted successfully"}

# Fetch Stories
@app.get("/api/stories")
async def get_stories():
    stories = list(stories_collection.find())
    return [
        {
            "title": story["title"],
            "author": "Anonymous" if story["anonymous"] else story.get("author", "Unknown"),
            "media": story.get("media"),
            "likes": story.get("likes", 0),
            "shares": story.get("shares", 0),
            "comments": story.get("comments", []),
        }
        for story in stories
    ]

# Like a Story
@app.post("/api/story/{story_id}/like")
async def like_story(story_id: str):
    story = stories_collection.find_one({"_id": ObjectId(story_id)})
    if not story:
        raise HTTPException(status_code=404, detail="Story not found")

    stories_collection.update_one({"_id": ObjectId(story_id)}, {"$inc": {"likes": 1}})
    return {"message": "Story liked"}

# Create Group
@app.post("/api/group")
async def create_group(group: Group, token: str = Depends(verify_token)):
    user = users_collection.find_one({"uid": token["uid"]})
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    group_data = {"name": group.name, "description": group.description, "creator": user["name"], "members": [user["name"]]}
    groups_collection.insert_one(group_data)
    return {"message": "Group created successfully"}

# Join Group
@app.post("/api/group/{group_id}/join")
async def join_group(group_id: str, token: str = Depends(verify_token)):
    user = users_collection.find_one({"uid": token["uid"]})
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    group = groups_collection.find_one({"_id": ObjectId(group_id)})
    if not group:
        raise HTTPException(status_code=404, detail="Group not found")

    if user["name"] in group["members"]:
        return {"message": "Already a member"}

    groups_collection.update_one({"_id": ObjectId(group_id)}, {"$push": {"members": user["name"]}})
    return {"message": "Joined group"}

# Fetch Groups
@app.get("/api/groups")
async def get_groups():
    groups = list(groups_collection.find())
    return [{"name": g["name"], "description": g["description"], "creator": g["creator"], "members": g["members"]} for g in groups]

# API Status
@app.get("/")
def home():
    return {"message": "Toboa Siri254 API is running!"}

